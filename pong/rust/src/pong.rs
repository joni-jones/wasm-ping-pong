// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.wasmcloud.examples.pong

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct Request {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub param: Option<String>,
}

// Encode Request as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Request,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    if let Some(val) = val.param.as_ref() {
        e.str("param")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode Request from cbor input stream
#[doc(hidden)]
pub fn decode_request(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<Request, RpcError> {
    let __result = {
        let mut param: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct Request, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        param = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "param" => {
                        param = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        Request {
            param: param.unwrap(),
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct Response {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<String>,
}

// Encode Response as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Response,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    if let Some(val) = val.result.as_ref() {
        e.str("result")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode Response from cbor input stream
#[doc(hidden)]
pub fn decode_response(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<Response, RpcError> {
    let __result = {
        let mut result: Option<Option<String>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct Response, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        result = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "result" => {
                        result = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        Response {
            result: result.unwrap(),
        }
    };
    Ok(__result)
}
/// The Pong service has a single method, calculate, which
/// calculates the factorial of its whole number parameter.
/// wasmbus.contractId: wasmcloud:examples:pong
/// wasmbus.providerReceive
/// wasmbus.actorReceive
#[async_trait]
pub trait Pong {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "wasmcloud:examples:pong"
    }
    /// Calculates the factorial (n!) of the input parameter
    async fn echo(&self, ctx: &Context, arg: &Request) -> RpcResult<Response>;
}

/// PongReceiver receives messages defined in the Pong service trait
/// The Pong service has a single method, calculate, which
/// calculates the factorial of its whole number parameter.
#[doc(hidden)]
#[async_trait]
pub trait PongReceiver: MessageDispatch + Pong {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "Echo" => {
                let value: Request = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'Request': {}", e)))?;

                let resp = Pong::echo(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Pong::{}",
                message.method
            ))),
        }
    }
}

/// PongSender sends messages to a Pong service
/// The Pong service has a single method, calculate, which
/// calculates the factorial of its whole number parameter.
/// client for sending Pong messages
#[derive(Clone, Debug)]
pub struct PongSender<T: Transport> {
    transport: T,
}

impl<T: Transport> PongSender<T> {
    /// Constructs a PongSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> PongSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl PongSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}

#[cfg(target_arch = "wasm32")]
impl PongSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a Pong provider
    /// implementing the 'wasmcloud:examples:pong' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "wasmcloud:examples:pong",
            "default",
        )
        .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a Pong provider
    /// implementing the 'wasmcloud:examples:pong' capability contract, with the specified link name
    pub fn new_with_link(link_name: &str) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "wasmcloud:examples:pong",
            link_name,
        )?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Pong for PongSender<T> {
    #[allow(unused)]
    /// Calculates the factorial (n!) of the input parameter
    async fn echo(&self, ctx: &Context, arg: &Request) -> RpcResult<Response> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Pong.Echo",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: Response = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': Response", e)))?;
        Ok(value)
    }
}
